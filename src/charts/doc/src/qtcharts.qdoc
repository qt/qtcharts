// Copyright (C) 2016 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \module QtCharts
    \title Qt Charts C++ Classes
    \ingroup modules

    \brief C++ classes for the Qt Charts API.

    Charts API is built on top of Qt Graphics View Framework. Charts can be displayed as QGraphicsWidget using the QChart class. However
    there is also the convenience class QChartView, which is QWidget based. These enable us to quickly use Qt Charts as a normal Qt widget.

    If you intend to use Qt Charts C++ classes in your application, use the
    following include and using directives:

    \snippet doc_src_qtcharts.cpp 0

    \if !defined(qtforpython)
    \note Projects created with Qt Creator's Qt Quick Application
    wizard are based on the Qt Quick 2 template that uses QGuiApplication by default.
    All such QGuiApplication instances in the project must be replaced with
    QApplication as the module depends on Qt's \l{Graphics View Framework}
    for rendering.

    To link against the Qt Charts module, add this line to your \c qmake project file:

    \snippet doc_src_qtcharts.pro 0
    \endif

    Each chart type is represented by the QAbstractSeries derived class. To create charts, the users have to use an instance of the related
    series class and add it to a QChart instance.

    \snippet doc_src_qtcharts.cpp 3
*/

/*!
    \qmlmodule QtCharts 2.\QtMinorVersion
    \title Qt Charts QML Types
    \ingroup qmlmodules

    \brief QML types for the Qt Charts API.

    The Qt Charts QML API is an intuitive and simple way to show charts in your
    QML applications.

    \section1 QML Types
*/

/*!
    \group qtcharts_examples
    \title Qt Charts Examples

    \brief Examples for the Qt Charts.

    The Qt Charts examples demonstrate how to use charts in widget-based and
    Qt Quick applications:

*/
